#ifndef SPH_INCLUDE
#define SPH_INCLUDE

static int3 neighborOffset[27] =
{
    int3(-1,-1,-1), int3(0,-1,-1), int3(1,-1,-1),
    int3(-1,0,-1), int3(0,0,-1), int3(1,0,-1),
    int3(-1,1,-1), int3(0,1,-1), int3(1,1,-1),

    int3(-1,-1,0), int3(0,-1,0), int3(1,-1,0),
    int3(-1,0,0), int3(0,0,0), int3(1,0,0),
    int3(-1,1,0), int3(0,1,0), int3(1,1,0),

    int3(-1,-1,1), int3(0,-1,1), int3(1,-1,1),
    int3(-1,0,1), int3(0,0,1), int3(1,0,1),
    int3(-1,1,1), int3(0,1,1), int3(1,1,1),
};

struct Particle
{
    float mass;
    float inv_density;
    float3 position;
    float3 velocity;
    uint onSurface;
    float3 midVelocity;
    float3 prevVelocity;
    float pressure;
    float3 forcePressure;
    float3 forceViscosity;
    float3 forceTension;
    uint cellIdx1d;
};

uniform float kernelRadius;
uniform float kr1Inv;
uniform float kr3Inv;
uniform float kr6Inv;
uniform float kr9Inv;

uniform float timeStep;
uniform uint3 gridSize;

uniform float stiffness;
uniform float restDensity;
uniform float3 externalAcc;
uniform float viscosity;
uniform float tensionCoeff;
uniform float surfaceThreshold;
uniform float eps;

uniform float3 lowerBound;
uniform float3 upperBound;

#define kPoly6Const (1.566681471061)
#define gradKPoly6Const (-9.4000888264)
#define lapKPoly6Const (-9.4000888264)
#define kSpikyConst (4.774648292757)
#define gradKSpikyConst (-14.3239448783)
#define kViscosityConst (2.387324146378)
#define lapkViscosityConst (14.3239448783)

inline float KernelPoly6(float3 r)
{
    float sqrDiff = (kernelRadius * kernelRadius - dot(r, r));
    if (sqrDiff < 0)
        return 0;
    return kPoly6Const * kr9Inv * sqrDiff * sqrDiff * sqrDiff;
}

inline float3 GradKernelPoly6(float3 r)
{
    float sqrDiff = (kernelRadius * kernelRadius - dot(r, r));
    if (sqrDiff < 0)
        return float3(0, 0, 0);
    return gradKPoly6Const * kr9Inv * sqrDiff * sqrDiff * r;
}

inline float LaplacianKernelPoly6(float3 r)
{
    float r2 = dot(r, r);
    float sqrDiff = (kernelRadius * kernelRadius - r2);
    if (sqrDiff < 0)
        return 0;
    return lapKPoly6Const * kr9Inv * sqrDiff * (3 * kernelRadius * kernelRadius - 7 * r2);
}

inline float KernelSpiky(float3 r)
{
    float diff = kernelRadius - length(r);
    if (diff < 0)
        return 0;
    return kSpikyConst * kr6Inv * diff * diff * diff;
}

inline float3 GradKernelSpiky(float3 r)
{
    float mag = length(r);
    float diff = (kernelRadius - mag);
    if (diff < 0 || mag <= 0)
        return float3(0, 0, 0);
    r *= (1 / mag);
    return gradKSpikyConst * kr6Inv * diff * diff * r;
}

inline float KernelViscosity(float3 r)
{
    float mag = length(r);
    if (kernelRadius - mag < 0)
        return 0;
    float sqrMag = mag * mag;
    return kViscosityConst * kr3Inv * (-0.5 * mag * sqrMag * kr3Inv + sqrMag / (kernelRadius * kernelRadius)+0.5 * kernelRadius / mag - 1);
}

inline float LaplacianKernelViscosity(float3 r)
{
    float mag = length(r);
    float diff = kernelRadius - mag;
    if (diff < 0 || mag <= 0)
        return 0;
    return lapkViscosityConst * kr6Inv * diff;
}

inline void ApplyGridBoundaryCondition(inout Particle particle)
{
    int3 cellIdx = floor((particle.position - lowerBound) * kr1Inv);
    bool collision = false;
    float3 contact = (particle.position - lowerBound);
    float3 contactNormal = float3(0, 0, 0);
    if (cellIdx.x < 0)
    {
        collision = true;
        contact.x = eps;
        contactNormal.x -= 1;
    }
    if (cellIdx.x >= (int)gridSize.x)
    {
        collision = true;
        contact.x = gridSize.x * kernelRadius - eps;
        contactNormal.x += 1;
    }
    if (cellIdx.y < 0)
    {
        collision = true;
        contact.y = eps;
        contactNormal.y -= 1;
    }
    if (cellIdx.y >= (int)gridSize.y)
    {
        collision = true;
        contact.y = gridSize.y * kernelRadius - eps;
        contactNormal.y += 1;
    }
    if (cellIdx.z < 0)
    {
        collision = true;
        contact.z = eps;
        contactNormal.z -= 1;
    }
    if (cellIdx.z >= (int)gridSize.z)
    {
        collision = true;
        contact.z = gridSize.z * kernelRadius - eps;
        contactNormal.z += 1;
    }

    if (collision)
    {
        contactNormal = normalize(contactNormal);
        float3 proj = dot(particle.midVelocity, contactNormal) * contactNormal;
        particle.position = contact;
        particle.velocity -= (1 + 0.5) * proj;
        particle.midVelocity = 0.5 * (particle.velocity + particle.prevVelocity);
    }
}

#endif